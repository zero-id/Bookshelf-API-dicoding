{
	"info": {
		"_postman_id": "f5bd41f8-bf00-4e6c-b616-f497861315c1",
		"name": "Books API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25498144"
	},
	"item": [
		{
			"name": "Add a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"   pm.response.to.have.status(201);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have bookId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('bookId');\r",
							"    pm.expect(data.bookId).to.not.equals('');\r",
							" \r",
							"    pm.environment.set('bookId', data.bookId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ZeroBook\",\r\n    \"year\": 2023,\r\n    \"author\": \"Zero\",\r\n    \"summary\": \"Testing\",\r\n    \"publisher\": \"ZeroID\",\r\n    \"pageCount\": 10,\r\n    \"readPage\": 10,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('books');\r",
							"   pm.expect(data.books).to.be.an('array');\r",
							"   pm.expect(data.books).lengthOf.at.least(1);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Book by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"}); \r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should contain book object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('book');\r",
							"   pm.expect(data.book).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							"//    const responseJson = pm.response.json();\r",
							"//    const { data: { note } } = responseJson;\r",
							"//    const expectedId = pm.environment.get('noteId');\r",
							"//    const expectedTitle = 'Catatan A';\r",
							"//    const expectedTags = ['Android', 'Web'];\r",
							"//    const expectedBody = 'Isi dari catatan A';\r",
							"//    pm.expect(note).to.have.ownProperty('id');\r",
							"//    pm.expect(note.id).to.equals(expectedId);\r",
							"//    pm.expect(note).to.have.ownProperty('title');\r",
							"//    pm.expect(note.title).to.equals(expectedTitle);\r",
							"//    pm.expect(note).to.have.ownProperty('tags');\r",
							"//    pm.expect(note.tags).to.eql(expectedTags);\r",
							"//    pm.expect(note).to.have.ownProperty('body');\r",
							"//    pm.expect(note.body).to.equals(expectedBody);\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");\r",
							"}); \r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Buku berhasil diperbarui');\r",
							"});\r",
							"\r",
							"// pm.test('when request the updated note', () => {\r",
							"//     const noteId = pm.environment.get('noteId');\r",
							"//     pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"//         if(!error) {\r",
							"//             pm.test('then the updated note should contain the latest data', () => {\r",
							"//                 const responseJson = response.json();\r",
							"//                 const { data: { note } } = responseJson;\r",
							" \r",
							"//                 const expectedTitle = 'Catatan A Revised';\r",
							"//                 const expectedTags = ['Android', 'Web'];\r",
							"//                 const expectedBody = 'Isi dari Catatan A Revised';\r",
							" \r",
							"//                 pm.expect(note.title).to.equals(expectedTitle);\r",
							"//                 pm.expect(note.tags).to.eql(expectedTags);\r",
							"//                 pm.expect(note.body).to.equals(expectedBody);\r",
							"//             });\r",
							"//         }\r",
							"//     });\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"ZeroBook2\",\r\n    \"year\": 2023,\r\n    \"author\": \"Zero\",\r\n    \"summary\": \"Testing\",\r\n    \"publisher\": \"ZeroID\",\r\n    \"pageCount\": 10,\r\n    \"readPage\": 10,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"}); \r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
							"});\r",
							"\r",
							"// pm.test('when request the deleted book', () => {\r",
							"//     const noteId = pm.environment.get('bookId');\r",
							"//     pm.sendRequest(`http://localhost:9000/books/${bookId}`, (error, response) => {\r",
							"//         if(!error) {\r",
							"//             pm.test('the deleted book should be not found', () => {\r",
							"//                 pm.expect(response.code).to.equals(404);\r",
							"//                 const responseJson = response.json();\r",
							"//                 pm.expect(responseJson.status).to.equals('fail');\r",
							"//                 pm.expect(responseJson.message).to.equals('Buku tidak ditemukan');\r",
							"//             });\r",
							"//         }\r",
							"//     });\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		}
	]
}